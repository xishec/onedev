# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  release:
    types: [created]

env:
  PROJECT_ID: quality-onedev
  GKE_CLUSTER: onedev-cluster    # TODO: update to cluster name
  GKE_ZONE: us-central1-a   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  IMAGE: static-site

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAicXVhbGl0eS1v bmVkZXYiLAogICJwcml2YXRlX2tleV9pZCI6ICJlN2NiOGUzMjExYTcwYjE1OGI4NjFlYjRlNmI5 Y2FmZGY2ZWI3MjE1IiwKICAicHJpdmF0ZV9rZXki OiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0t LS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUN0 NWtBYU9Vb1BBbTNxXG5jUUR5eDZqdTNqM3hKVzZTZUQ0Q2wwaVcyeGpmMlNPNE5RUDZOOGtZY0p2 dHk 1NmpuVVQyOEtzMm1JdGk4ZjNrXG5ScTRwcnFBK29PeWUzWGdkbHI4cVpNTkExbkdpVndoblR5 cnJSMzErc2tORTZscnloU2czWXpiYm9ROHgwSkxIXG56bjR1NytPVXFHb0dWazRiSitHTE1aL1Qv emRMRUhZbGhMRFBGV1ZDM3BCQ1lNZTNmKzBHZjZBWEI yVElRN05aXG5hekUxRmZTK293bVJSUGt2 NnlHTEFoblJKQzhjZitFN3AzR09EYnAvUnlHZkVuRjVTbVRzbGdoRS9vVDJDR3VoXG4xRnoybHRu YkJWRlVLVEg4WElYME92NWQ4S3FBSmFHamFtb3QwUDhKYWtEaERFMDExR2xJa3RlYTJ6c0V0dFl4 XG5WeF hPcTlMOUFnTUJBQUVDZ2dFQUdCSEpoNWVzWDMxM2x6NkM0aGV1a3psaG0zSVI1dVlMdHpJ WFV3SUtaRmxhXG5yMUZ2Tm4vb0xxRFBoRTl0cXJuRzVPTVUzNTZubEU5b1UrTlFrZVpndWFwdWRl S3prR3pnRXM4VmszRGJFNXcyXG5SbzVYbzI4bXVKV1Y2QU VFQzVOUXFMSHIwdVJ0QlBrWWg5MVY2 OHM2VmNZbHZyRE5hTWJSV2dISlhIOXp1TWpZXG5za2JubmRIdnhPZndBbnk3V2toeE1oZUFlMVlG Y2Y5NW44cUR5UTJDVGlSbWZrSWxtdlpQSk9mYzR3OGVIUHNJXG5ZZzdiQkRudWEvWXZXU1lrY0tK Nng1a2ZLW Gs0NXZaa1A1SjVWMjZCeUd2MytpcDB4S21hSHNlMXVXRjd1aFdCXG5EZWMyR0Y4Tk90 YTN3MlJLWW5kZEt0cG53T0duVlpCY2QrMTk1SWR1eFFLQmdRRHRONHE5YWVGRno1UHlGbmhZXG5u eXhCU3N4TVFieFlSMjJVdnI0Y0xSRUlUUzIwaHFGR0NydmswQ kg4VDR1U01mbHpOSWxqVndCWm9h S3lhdDA3XG4razdjYnUwdFp3anpSK2Z5YUpIaVRpVTYwMldOZHYzK0lQc1NlRk1qbUo0RFg5S2ZK UktBRm5qcjRveURaUTRZXG5EWENKQ1FuL05ZTDJmdEQwdFNXMGxzMkQ0d0tCZ1FDN3F6NDQ2ZFNh aDdSQkkvVHBt di9sSHd5L0JpLzJTc3M4XG5rWGpNa2VjVlF3TjNyZW1xWFgxTHRiNjBhUkkrZTdH bnhGMjR5UXVOekVUUFp4UHljb0xDcDEvTG80QkV4VUtzXG5Jd2RiWE5lR0t4c2NnVHowdUsrRXpT azY4cm5VSnZwanJZME9YalJ4SWk3Tjd6L1VaRjVhMW11ZVhSN3FO UVhhXG43ZlREcnZ2RG53S0Jn UURkYTh1NEUvMnZnUnV5aStEWHIvUEtHanhxTGEzVnBRNlhHaGd3Q3F6c1Y4WUN6T3Y2XG5pZ2hx Z3dGV3h4VWJhRVJVa2NSd0VvU0VKWWpOQzB6b01ET3VOR2gweWNrajlJbC96clhsVEZZWis3cTkr a1VKXG5FZFhwbnF EVUNCL3VQR0pJSkgySlMvQ2hGYjFjNUZYc2c1YjRncFJ2UUk2MjhSYXdZK29I RUFCVFN3S0JnQ0h2XG5ubW5XUnQ3R3lWNjZMTkNOZWRhcDNia3hXanowVzNvUmFFRzk1SWFndnFE R3J5bGlqSVREVWIvMy9CZVdjSkxBXG4zSjNNcFMwNEVmMWJTMjBkTGU 0YkxDUjc1WGNLSUx0Vi9q K1VNMWtNdEhOY0gzUzFiTy9iMWFmV09xcFZmaFBHXG5UMnFZdUd6NDNIUGEzclQralYxcHhyNDFZ cURCZzlTS0VTZk5uYk5MQW9HQkFJSXlJMnd2ZUtUUTZMK3RQb1I0XG5rWkZSYkRBY01yZFV0Nkk3 dDVBd1NLTUM2Mks5TW V5Q2hIbXFQTkp6Uk1pZUJqQmxvY0JOWEpYdVFwdzA3RnhOXG5oYnp2MW1Z a0ltNWpQOGdlWFFqeVRPbmpDZTFqNVM2Tmx5KzBod2Q1eFlxem9DZzY4eTdHSW1Mb205Y05uYnQ1 XG5GMExyNks1MmtPcVZpb3RybktMVkdGQTVcbi0tLS0tRU5EIFBSSVZBVE UgS0VZLS0tLS1cbiIs CiAgImNsaWVudF9lbWFpbCI6ICJ4aXNoZWNAcXVhbGl0eS1vbmVkZXYuaWFtLmdzZXJ2aWNlYWNj b3VudC5jb20iLAogICJjbGllbnRfaWQiOiAiMTAxOTYzNzU1NTEzNDU0ODIxMTg3IiwKICAiYXV0 aF91cmkiOiAiaHR0cHM6L y9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0 b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLAogICJhdXRo X3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlY XBpcy5jb20vb2F1 dGgyL3YxL2NlcnRzIiwKICAiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29v Z2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS94aXNoZWMlNDBxdWFsaXR5LW9uZWRl di5pYW0uZ3NlcnZpY2VhY2Nv dW50LmNvbSIKfQo=
        project_id: quality-onedev

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAicXVhbGl0eS1v bmVkZXYiLAogICJwcml2YXRlX2tleV9pZCI6ICJlN2NiOGUzMjExYTcwYjE1OGI4NjFlYjRlNmI5 Y2FmZGY2ZWI3MjE1IiwKICAicHJpdmF0ZV9rZXki OiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0t LS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUN0 NWtBYU9Vb1BBbTNxXG5jUUR5eDZqdTNqM3hKVzZTZUQ0Q2wwaVcyeGpmMlNPNE5RUDZOOGtZY0p2 dHk 1NmpuVVQyOEtzMm1JdGk4ZjNrXG5ScTRwcnFBK29PeWUzWGdkbHI4cVpNTkExbkdpVndoblR5 cnJSMzErc2tORTZscnloU2czWXpiYm9ROHgwSkxIXG56bjR1NytPVXFHb0dWazRiSitHTE1aL1Qv emRMRUhZbGhMRFBGV1ZDM3BCQ1lNZTNmKzBHZjZBWEI yVElRN05aXG5hekUxRmZTK293bVJSUGt2 NnlHTEFoblJKQzhjZitFN3AzR09EYnAvUnlHZkVuRjVTbVRzbGdoRS9vVDJDR3VoXG4xRnoybHRu YkJWRlVLVEg4WElYME92NWQ4S3FBSmFHamFtb3QwUDhKYWtEaERFMDExR2xJa3RlYTJ6c0V0dFl4 XG5WeF hPcTlMOUFnTUJBQUVDZ2dFQUdCSEpoNWVzWDMxM2x6NkM0aGV1a3psaG0zSVI1dVlMdHpJ WFV3SUtaRmxhXG5yMUZ2Tm4vb0xxRFBoRTl0cXJuRzVPTVUzNTZubEU5b1UrTlFrZVpndWFwdWRl S3prR3pnRXM4VmszRGJFNXcyXG5SbzVYbzI4bXVKV1Y2QU VFQzVOUXFMSHIwdVJ0QlBrWWg5MVY2 OHM2VmNZbHZyRE5hTWJSV2dISlhIOXp1TWpZXG5za2JubmRIdnhPZndBbnk3V2toeE1oZUFlMVlG Y2Y5NW44cUR5UTJDVGlSbWZrSWxtdlpQSk9mYzR3OGVIUHNJXG5ZZzdiQkRudWEvWXZXU1lrY0tK Nng1a2ZLW Gs0NXZaa1A1SjVWMjZCeUd2MytpcDB4S21hSHNlMXVXRjd1aFdCXG5EZWMyR0Y4Tk90 YTN3MlJLWW5kZEt0cG53T0duVlpCY2QrMTk1SWR1eFFLQmdRRHRONHE5YWVGRno1UHlGbmhZXG5u eXhCU3N4TVFieFlSMjJVdnI0Y0xSRUlUUzIwaHFGR0NydmswQ kg4VDR1U01mbHpOSWxqVndCWm9h S3lhdDA3XG4razdjYnUwdFp3anpSK2Z5YUpIaVRpVTYwMldOZHYzK0lQc1NlRk1qbUo0RFg5S2ZK UktBRm5qcjRveURaUTRZXG5EWENKQ1FuL05ZTDJmdEQwdFNXMGxzMkQ0d0tCZ1FDN3F6NDQ2ZFNh aDdSQkkvVHBt di9sSHd5L0JpLzJTc3M4XG5rWGpNa2VjVlF3TjNyZW1xWFgxTHRiNjBhUkkrZTdH bnhGMjR5UXVOekVUUFp4UHljb0xDcDEvTG80QkV4VUtzXG5Jd2RiWE5lR0t4c2NnVHowdUsrRXpT azY4cm5VSnZwanJZME9YalJ4SWk3Tjd6L1VaRjVhMW11ZVhSN3FO UVhhXG43ZlREcnZ2RG53S0Jn UURkYTh1NEUvMnZnUnV5aStEWHIvUEtHanhxTGEzVnBRNlhHaGd3Q3F6c1Y4WUN6T3Y2XG5pZ2hx Z3dGV3h4VWJhRVJVa2NSd0VvU0VKWWpOQzB6b01ET3VOR2gweWNrajlJbC96clhsVEZZWis3cTkr a1VKXG5FZFhwbnF EVUNCL3VQR0pJSkgySlMvQ2hGYjFjNUZYc2c1YjRncFJ2UUk2MjhSYXdZK29I RUFCVFN3S0JnQ0h2XG5ubW5XUnQ3R3lWNjZMTkNOZWRhcDNia3hXanowVzNvUmFFRzk1SWFndnFE R3J5bGlqSVREVWIvMy9CZVdjSkxBXG4zSjNNcFMwNEVmMWJTMjBkTGU 0YkxDUjc1WGNLSUx0Vi9q K1VNMWtNdEhOY0gzUzFiTy9iMWFmV09xcFZmaFBHXG5UMnFZdUd6NDNIUGEzclQralYxcHhyNDFZ cURCZzlTS0VTZk5uYk5MQW9HQkFJSXlJMnd2ZUtUUTZMK3RQb1I0XG5rWkZSYkRBY01yZFV0Nkk3 dDVBd1NLTUM2Mks5TW V5Q2hIbXFQTkp6Uk1pZUJqQmxvY0JOWEpYdVFwdzA3RnhOXG5oYnp2MW1Z a0ltNWpQOGdlWFFqeVRPbmpDZTFqNVM2Tmx5KzBod2Q1eFlxem9DZzY4eTdHSW1Mb205Y05uYnQ1 XG5GMExyNks1MmtPcVZpb3RybktMVkdGQTVcbi0tLS0tRU5EIFBSSVZBVE UgS0VZLS0tLS1cbiIs CiAgImNsaWVudF9lbWFpbCI6ICJ4aXNoZWNAcXVhbGl0eS1vbmVkZXYuaWFtLmdzZXJ2aWNlYWNj b3VudC5jb20iLAogICJjbGllbnRfaWQiOiAiMTAxOTYzNzU1NTEzNDU0ODIxMTg3IiwKICAiYXV0 aF91cmkiOiAiaHR0cHM6L y9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0 b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLAogICJhdXRo X3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlY XBpcy5jb20vb2F1 dGgyL3YxL2NlcnRzIiwKICAiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29v Z2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS94aXNoZWMlNDBxdWFsaXR5LW9uZWRl di5pYW0uZ3NlcnZpY2VhY2Nv dW50LmNvbSIKfQo=

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

#     # Set up kustomize
#     - name: Set up Kustomize
#       run: |-
#         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#         chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
#     - name: Deploy
#       run: |-
#         ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
#         ./kustomize build . | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide
    - name: Deploy
      run: kubectl set image "deployment/onedev onedev=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
